---
export interface Props {
  code?: string;
  title?: string;
  height?: string;
  id?: string;
}

const { code = '', title = 'Python Code Runner', height = '400px', id } = Astro.props;
const uniqueId = id || `pyrunner-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="py-runner" id={uniqueId}>
  <div class="runner-header">
    <h4>{title}</h4>
    <div class="runner-controls">
      <button type="button" class="run-btn" onclick={`runPython('${uniqueId}')`}>
        ‚ñ∂Ô∏è Run Code
      </button>
      <button type="button" class="clear-btn" onclick={`clearOutput('${uniqueId}')`}>
        üóëÔ∏è Clear
      </button>
    </div>
  </div>
  
  <div class="runner-content">
    <div class="code-section">
      <div class="code-header">
        <span>Python Code</span>
      </div>
      <textarea 
        class="code-input" 
        placeholder="# Write your Python code here..."
        style={`height: ${height}`}
      >{code}</textarea>
    </div>
    
    <div class="output-section">
      <div class="output-header">
        <span>Output</span>
      </div>
      <pre class="output-display" style={`height: ${height}`}></pre>
    </div>
  </div>
  
  <div class="loading" style="display: none;">
    <div class="loading-spinner"></div>
    <span>Loading Python environment...</span>
  </div>
</div>

<script>
  let pyodideReady = false;
  let pyodide = null;

  async function initializePyodide() {
    if (pyodideReady) return;
    
    try {
      // Load Pyodide from CDN
      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/pyodide/v0.24.1/full/pyodide.js';
      document.head.appendChild(script);
      
      await new Promise((resolve) => {
        script.onload = resolve;
      });
      
      pyodide = await loadPyodide();
      pyodideReady = true;
    } catch (error) {
      console.error('Failed to load Pyodide:', error);
      throw new Error('Failed to initialize Python environment');
    }
  }

  async function runPython(runnerId) {
    const runner = document.getElementById(runnerId);
    const codeInput = runner.querySelector('.code-input');
    const outputDisplay = runner.querySelector('.output-display');
    const loading = runner.querySelector('.loading');
    const runBtn = runner.querySelector('.run-btn');
    
    const code = codeInput.value.trim();
    if (!code) {
      outputDisplay.textContent = 'No code to run!';
      return;
    }
    
    // Show loading state
    loading.style.display = 'flex';
    runBtn.disabled = true;
    outputDisplay.textContent = 'Initializing Python...';
    
    try {
      // Initialize Pyodide if needed
      if (!pyodideReady) {
        await initializePyodide();
      }
      
      // Capture stdout
      pyodide.runPython(`
        import sys
        from io import StringIO
        old_stdout = sys.stdout
        sys.stdout = mystdout = StringIO()
      `);
      
      // Run user code
      try {
        pyodide.runPython(code);
      } catch (error) {
        outputDisplay.textContent = `Error: ${error.message}`;
        return;
      }
      
      // Get output
      const output = pyodide.runPython(`
        sys.stdout = old_stdout
        mystdout.getvalue()
      `);
      
      outputDisplay.textContent = output || '(No output)';
      
    } catch (error) {
      outputDisplay.textContent = `Failed to run code: ${error.message}`;
    } finally {
      loading.style.display = 'none';
      runBtn.disabled = false;
    }
  }
  
  function clearOutput(runnerId) {
    const runner = document.getElementById(runnerId);
    const outputDisplay = runner.querySelector('.output-display');
    outputDisplay.textContent = '';
  }
</script>

<style>
  .py-runner {
    border: 1px solid #e1e1e1;
    border-radius: 12px;
    margin: 1.5rem 0;
    background: white;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    overflow: hidden;
  }

  .runner-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background: #2d3748;
    color: white;
  }

  .runner-header h4 {
    margin: 0;
    font-size: 1.1rem;
    font-weight: 600;
  }

  .runner-controls {
    display: flex;
    gap: 0.5rem;
  }

  .run-btn, .clear-btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s;
  }

  .run-btn {
    background: #48bb78;
    color: white;
  }

  .run-btn:hover:not(:disabled) {
    background: #38a169;
  }

  .run-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .clear-btn {
    background: #e53e3e;
    color: white;
  }

  .clear-btn:hover {
    background: #c53030;
  }

  .runner-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1px;
    background: #e1e1e1;
  }

  .code-section, .output-section {
    background: white;
    display: flex;
    flex-direction: column;
  }

  .code-header, .output-header {
    padding: 0.75rem 1rem;
    background: #f7fafc;
    border-bottom: 1px solid #e1e1e1;
    font-weight: 600;
    font-size: 0.9rem;
    color: #4a5568;
  }

  .code-input {
    border: none;
    padding: 1rem;
    font-family: 'Fira Code', Consolas, monospace;
    font-size: 0.9rem;
    line-height: 1.4;
    resize: none;
    background: #1a202c;
    color: #e2e8f0;
    outline: none;
  }

  .code-input::placeholder {
    color: #a0aec0;
  }

  .output-display {
    margin: 0;
    padding: 1rem;
    background: #f7fafc;
    color: #2d3748;
    font-family: 'Fira Code', Consolas, monospace;
    font-size: 0.9rem;
    line-height: 1.4;
    white-space: pre-wrap;
    overflow-y: auto;
    border: none;
  }

  .loading {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    padding: 2rem;
    background: #f7fafc;
    border-top: 1px solid #e1e1e1;
    color: #4a5568;
  }

  .loading-spinner {
    width: 20px;
    height: 20px;
    border: 2px solid #e1e1e1;
    border-top: 2px solid #0066cc;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  @media (max-width: 768px) {
    .runner-content {
      grid-template-columns: 1fr;
    }
    
    .runner-header {
      flex-direction: column;
      gap: 1rem;
      align-items: stretch;
    }
    
    .runner-controls {
      justify-content: center;
    }
  }
</style>