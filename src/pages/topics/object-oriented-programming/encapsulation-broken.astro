---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import OOPNav from '../../../components/OOPNav';
import Tooltip from '../../../components/Tooltip';
import '../../../styles/global.css';

// Use Astro's base URL for proper GitHub Pages routing
const base = import.meta.env.BASE_URL;
---

<BaseLayout title="Encapsulation - Object-Oriented Programming" description="Understanding encapsulation, data hiding, and access control in object-oriented programming">
  <!-- Breadcrumb Bar -->
  <div class="bg-gray-50 border-b border-gray-200 py-3">
    <div class="container mx-auto px-6">
      <nav>
        <a href={`${base}/`} class="text-sm text-gray-600 hover:text-blue-900 transition-colors">Home</a>
        <span class="text-sm text-gray-400 mx-2">></span>
        <a href={`${base}/topics/object-oriented-programming`} class="text-sm text-gray-600 hover:text-blue-900 transition-colors">Object-Oriented Programming</a>
        <span class="text-sm text-gray-400 mx-2">></span>
        <span class="text-sm text-blue-900 font-medium">Encapsulation</span>
      </nav>
    </div>
  </div>

  <div class="min-h-screen bg-gray-50 py-8">
    <div class="container mx-auto px-6">
      <div class="grid lg:grid-cols-4 gap-8">
        <!-- Navigation Sidebar -->
        <div class="lg:col-span-1">
          <div class="sticky top-8 bg-white rounded-lg shadow-sm p-6">
            <OOPNav 
              client:load 
              currentPage="/topics/object-oriented-programming/encapsulation"
            />
          </div>
        </div>

        <!-- Main Content -->
        <div class="lg:col-span-3">
          <div class="bg-white rounded-lg shadow-sm p-8">
            <h1 class="text-4xl font-bold mb-6">Encapsulation</h1>
            
            <div class="mb-8 p-6 bg-gradient-to-r from-green-50 to-blue-50 rounded-xl border border-green-200">
              <h2 class="text-2xl font-bold text-gray-900 mb-4">What is Encapsulation?</h2>
              <p class="text-gray-800 text-lg leading-relaxed">
                <strong><Tooltip client:load term="Encapsulation" definition="The bundling of data and methods that operate on that data within a single unit, controlling access to prevent external interference">Encapsulation</Tooltip></strong> is like putting your data in a protective capsule. It bundles data (attributes) and methods together while controlling who can access what. Think of it as a pill capsule that protects the medicine inside.
              </p>
            </div>

            <!-- Core Concepts -->
            <div class="mb-8">
              <h2 class="text-2xl font-semibold mb-6 text-gray-900">Core Encapsulation Concepts</h2>
              
              <!-- Data Hiding -->
              <div class="mb-6 bg-blue-50 p-6 rounded-lg border border-blue-200">
                <h3 class="text-xl font-semibold text-blue-800 mb-4">1. Data Hiding</h3>
                <p class="text-blue-700 mb-4">Keep internal data private and provide controlled access through methods.</p>
                
                <div class="bg-white p-4 rounded border border-blue-300">
                  <h4 class="font-medium text-blue-700 mb-2">Python Example:</h4>
                  <pre class="text-sm font-mono bg-gray-100 text-gray-800 p-3 rounded border-l-4 border-blue-400"><code>class BankAccount:
    def __init__(self, account_number, initial_balance):
        self.account_number = account_number
        self._balance = initial_balance  # Private attribute
        self._transaction_count = 0      # Private counter
    
    def deposit(self, amount):
        """Public method to safely modify private data"""
        if amount > 0:
            self._balance += amount
            self._transaction_count += 1
            return True
        return False
    
    def get_balance(self):
        """Public method to safely access private data"""
        return self._balance
    
    def get_transaction_count(self):
        """Controlled access to private data"""
        return self._transaction_count

# Usage - only access through public methods
account = BankAccount("ACC123", 1000)
account.deposit(500)  # Safe way to modify balance
balance = account.get_balance()
print("Balance: " + str(balance))  # Safe access

# Direct access not recommended
# print(account._balance)  # Works but breaks encapsulation</code></pre>
                </div>
              </div>

              <!-- Access Control -->
              <div class="mb-6 bg-green-50 p-6 rounded-lg border border-green-200">
                <h3 class="text-xl font-semibold text-green-800 mb-4">2. Access Control Levels</h3>
                <p class="text-green-700 mb-4">Python uses naming conventions to indicate access levels.</p>
                
                <div class="grid md:grid-cols-2 gap-4">
                  <div class="bg-white p-4 rounded border border-green-300">
                    <h4 class="font-medium text-green-700 mb-2">Public Attributes</h4>
                    <pre class="text-sm font-mono bg-gray-100 text-gray-800 p-3 rounded"><code>class Student:
    def __init__(self, name):
        self.name = name        # Public
        self.student_id = None  # Public
    
    def display_info(self):     # Public method
        print(f"Name&#123;':'&#125; &#123;self.name&#125;")

student = Student("Alice")
print(student.name)  # Direct access OK</code></pre>
                  </div>
                  
                  <div class="bg-white p-4 rounded border border-green-300">
                    <h4 class="font-medium text-green-700 mb-2">Private Attributes</h4>
                    <pre class="text-sm font-mono bg-gray-100 text-gray-800 p-3 rounded"><code>class Student:
    def __init__(self, name):
        self.name = name
        self._grade = None      # Private (by convention)
        self._gpa = 0.0         # Private
    
    def set_grade(self, grade): # Public interface
        if 0 &lt;= grade &lt;= 100:
            self._grade = grade
    
    def get_gpa(self):          # Controlled access
        return self._gpa</code></pre>
                  </div>
                </div>
              </div>

              <!-- Getters and Setters -->
              <div class="mb-6 bg-purple-50 p-6 rounded-lg border border-purple-200">
                <h3 class="text-xl font-semibold text-purple-800 mb-4">3. Getters and Setters</h3>
                <p class="text-purple-700 mb-4">Control how data is accessed and modified through special methods.</p>
                
                <div class="bg-white p-4 rounded border border-purple-300">
                  <h4 class="font-medium text-purple-700 mb-2">Property Example:</h4>
                  <pre class="text-sm font-mono bg-gray-100 text-gray-800 p-3 rounded border-l-4 border-purple-400"><code>class Temperature:
    def __init__(self, celsius=0):
        self._celsius = celsius
    
    @property
    def celsius(self):
        """Getter method"""
        return self._celsius
    
    @celsius.setter
    def celsius(self, value):
        """Setter method with validation"""
        if value < -273.15:
            raise ValueError("Temperature cannot be below absolute zero")
        self._celsius = value
    
    @property
    def fahrenheit(self):
        """Computed property"""
        return (self._celsius * 9/5) + 32
    
    @fahrenheit.setter
    def fahrenheit(self, value):
        """Convert and validate Fahrenheit input"""
        celsius_value = (value - 32) * 5/9
        if celsius_value < -273.15:
            raise ValueError("Temperature cannot be below absolute zero")
        self._celsius = celsius_value

# Usage - looks like direct access but uses methods
temp = Temperature(25)
print(f"Celsius&#123;':'&#125; &#123;temp.celsius&#125;")     # Uses getter
print(f"Fahrenheit&#123;':'&#125; &#123;temp.fahrenheit&#125;") # Uses computed property

temp.celsius = 30      # Uses setter with validation
temp.fahrenheit = 100  # Uses setter with conversion</code></pre>
                </div>
              </div>
            </div>

            <!-- Benefits of Encapsulation -->
            <div class="mb-8">
              <h2 class="text-2xl font-semibold mb-6 text-gray-900">Benefits of Encapsulation</h2>
              
              <div class="grid md:grid-cols-2 gap-6">
                <div class="bg-white p-6 rounded-lg border border-gray-200 shadow-sm">
                  <h3 class="text-lg font-semibold text-gray-900 mb-4">Advantages</h3>
                  <ul class="space-y-3 text-gray-700">
                    <li class="flex items-start">
                      <span class="text-green-500 mr-3 mt-1">✓</span>
                      <div>
                        <strong>Data Protection:</strong> Prevents accidental modification of important data
                      </div>
                    </li>
                    <li class="flex items-start">
                      <span class="text-green-500 mr-3 mt-1">✓</span>
                      <div>
                        <strong>Validation:</strong> Control what values can be stored through setter methods
                      </div>
                    </li>
                    <li class="flex items-start">
                      <span class="text-green-500 mr-3 mt-1">✓</span>
                      <div>
                        <strong>Flexibility:</strong> Change internal implementation without affecting external code
                      </div>
                    </li>
                    <li class="flex items-start">
                      <span class="text-green-500 mr-3 mt-1">✓</span>
                      <div>
                        <strong>Debugging:</strong> Easier to track where data is modified
                      </div>
                    </li>
                  </ul>
                </div>
                
                <div class="bg-white p-6 rounded-lg border border-gray-200 shadow-sm">
                  <h3 class="text-lg font-semibold text-gray-900 mb-4">Real-World Examples</h3>
                  <ul class="space-y-3 text-gray-700">
                    <li class="flex items-start">
                      <span class="text-blue-500 mr-3 mt-1">🏦</span>
                      <div>
                        <strong>Bank Account:</strong> Balance can only be changed through deposits/withdrawals
                      </div>
                    </li>
                    <li class="flex items-start">
                      <span class="text-purple-500 mr-3 mt-1">🚗</span>
                      <div>
                        <strong>Car Controls:</strong> Engine RPM controlled through accelerator, not directly
                      </div>
                    </li>
                    <li class="flex items-start">
                      <span class="text-orange-500 mr-3 mt-1">📱</span>
                      <div>
                        <strong>Smartphone:</strong> Apps access phone features through controlled interfaces
                      </div>
                    </li>
                    <li class="flex items-start">
                      <span class="text-red-500 mr-3 mt-1">🔒</span>
                      <div>
                        <strong>User Passwords:</strong> Stored privately, accessed through authentication methods
                      </div>
                    </li>
                  </ul>
                </div>
              </div>
            </div>

            <!-- Common Example -->
            <div class="mb-8">
              <h2 class="text-2xl font-semibold mb-6 text-gray-900">Complete Example: Game Character</h2>
              
              <div class="bg-orange-50 p-6 rounded-lg border border-orange-200">
                <h3 class="text-xl font-semibold text-orange-800 mb-4">RPG Character with Encapsulation</h3>
                <p class="text-orange-700 mb-4">See how encapsulation protects character data and provides safe access methods.</p>
                
                <div class="bg-white p-4 rounded border border-orange-300">
                  <pre class="text-sm font-mono bg-gray-100 text-gray-800 p-4 rounded border-l-4 border-orange-400"><code>class GameCharacter:
    def __init__(self, name, character_class):
        self.name = name
        self.character_class = character_class
        
        # Private attributes - core game stats
        self._health = 100
        self._max_health = 100
        self._experience = 0
        self._level = 1
        self._inventory = []
    
    # Safe health management
    def take_damage(self, damage):
        """Reduce health safely with validation"""
        if damage > 0:
            self._health = max(0, self._health - damage)
            if self._health == 0:
                print(f"&#123;self.name&#125; has been defeated!")
            return True
        return False
    
    def heal(self, amount):
        """Restore health with limits"""
        if amount > 0:
            old_health = self._health
            self._health = min(self._max_health, self._health + amount)
            healed = self._health - old_health
            print(f"&#123;self.name&#125; healed for &#123;healed&#125; health")
            return healed
        return 0
    
    # Experience and leveling system
    def gain_experience(self, exp):
        """Add experience and handle level ups"""
        if exp > 0:
            self._experience += exp
            print(f"&#123;self.name&#125; gained &#123;exp&#125; experience")
            
            # Check for level up
            if self._experience >= self._level * 100:
                self._level_up()
    
    def _level_up(self):
        """Private method for leveling up"""
        self._level += 1
        health_increase = 20
        self._max_health += health_increase
        self._health = self._max_health  # Full heal on level up
        print(f"&#123;self.name&#125; reached level &#123;self._level&#125;! Max health increased!")
    
    # Safe inventory management
    def add_item(self, item):
        """Add item to inventory safely"""
        if len(self._inventory) < 10:  # Inventory limit
            self._inventory.append(item)
            print(f"&#123;self.name&#125; picked up &#123;item&#125;")
            return True
        else:
            print("Inventory is full!")
            return False
    
    def remove_item(self, item):
        """Remove item from inventory"""
        if item in self._inventory:
            self._inventory.remove(item)
            print(f"&#123;self.name&#125; used &#123;item&#125;")
            return True
        return False
    
    # Controlled access to private data
    def get_health(self):
        return f"&#123;self._health&#125;/&#123;self._max_health&#125;"
    
    def get_level(self):
        return self._level
    
    def get_experience(self):
        exp_needed = (self._level * 100) - self._experience
        return f"Level &#123;self._level&#125; - &#123;exp_needed&#125; XP to next level"
    
    def get_inventory(self):
        return self._inventory.copy()  # Return copy to prevent external modification
    
    def display_stats(self):
        """Show character information"""
        print(f"\n=== &#123;self.name&#125; the &#123;self.character_class&#125; ===")
        print(f"Health&#123;':'&#125; &#123;self.get_health()&#125;")
        print(f"Experience&#123;':'&#125; &#123;self.get_experience()&#125;")
        inventory_display = ', '.join(self._inventory) if self._inventory else 'Empty'
        print(f"Inventory&#123;':'&#125; &#123;inventory_display&#125;")

# Example usage demonstrating encapsulation
warrior = GameCharacter("Conan", "Warrior")
warrior.display_stats()

# Safe operations through public methods
warrior.take_damage(30)
warrior.heal(15)
warrior.gain_experience(80)
warrior.add_item("Health Potion")
warrior.add_item("Iron Sword")

warrior.display_stats()

# More experience to trigger level up
warrior.gain_experience(50)
warrior.display_stats()</code></pre>
                </div>
              </div>
            </div>

            <!-- Practice Questions -->
            <div class="mb-8">
              <h2 class="text-2xl font-semibold mb-6 text-gray-900">Practice Questions</h2>
              
              <div class="space-y-6">
                <!-- Question 1 -->
                <div class="bg-white p-6 rounded-lg border-l-4 border-blue-500 shadow-sm">
                  <h3 class="font-semibold text-gray-900 mb-3">Question 1 (3 marks)</h3>
                  <p class="text-gray-700 mb-4"><strong>Explain</strong> what encapsulation means in object-oriented programming and <strong>give</strong> one advantage of using it.</p>
                  
                  <details class="mt-4">
                    <summary class="cursor-pointer text-blue-600 hover:text-blue-800 font-medium">Show Answer</summary>
                    <div class="mt-3 p-4 bg-gray-50 rounded">
                      <p class="text-sm mb-2"><strong>Definition (2 marks):</strong> Encapsulation is bundling data and methods together while controlling access to protect internal data from external interference.</p>
                      <p class="text-sm mb-2"><strong>Advantage (1 mark):</strong> Prevents accidental modification of data, ensures data validation, or enables safer code maintenance.</p>
                    </div>
                  </details>
                </div>

                <!-- Question 2 -->
                <div class="bg-white p-6 rounded-lg border-l-4 border-green-500 shadow-sm">
                  <h3 class="font-semibold text-gray-900 mb-3">Question 2 (4 marks)</h3>
                  <p class="text-gray-700 mb-4"><strong>Design</strong> a simple Student class that demonstrates encapsulation by keeping the grade private and providing public methods to safely access and modify it.</p>
                  
                  <details class="mt-4">
                    <summary class="cursor-pointer text-green-600 hover:text-green-800 font-medium">Show Sample Answer</summary>
                    <div class="mt-3 p-4 bg-gray-50 rounded">
                      <pre class="text-sm bg-white p-3 rounded border"><code>class Student:
    def __init__(self, name):
        self.name = name
        self._grade = 0  # Private attribute
    
    def set_grade(self, grade):
        if 0 <= grade <= 100:
            self._grade = grade
        else:
            print("Invalid grade")
    
    def get_grade(self):
        return self._grade</code></pre>
                      <p class="text-sm mt-2"><strong>4 marks:</strong> Private attribute (1), setter with validation (2), getter method (1)</p>
                    </div>
                  </details>
                </div>

                <!-- Question 3 -->
                <div class="bg-white p-6 rounded-lg border-l-4 border-purple-500 shadow-sm">
                  <h3 class="font-semibold text-gray-900 mb-3">Question 3 (5 marks)</h3>
                  <p class="text-gray-700 mb-4"><strong>Identify</strong> three encapsulation violations in this code and <strong>suggest</strong> how to fix them:</p>
                  <pre class="text-sm bg-gray-100 p-3 rounded mt-2 mb-4"><code>account = BankAccount("123", 1000)
account.balance = -500        # Direct modification
print(account.pin)            # Direct access to sensitive data
account.transaction_log = []  # Direct reset of internal data</code></pre>
                  
                  <details class="mt-4">
                    <summary class="cursor-pointer text-purple-600 hover:text-purple-800 font-medium">Show Answer</summary>
                    <div class="mt-3 p-4 bg-gray-50 rounded">
                      <p class="text-sm mb-2"><strong>Problem 1 (2 marks):</strong> Direct balance modification allows invalid negative values. Fix: Use deposit/withdraw methods with validation.</p>
                      <p class="text-sm mb-2"><strong>Problem 2 (2 marks):</strong> Direct access to sensitive PIN data. Fix: Make PIN private and provide authentication method instead.</p>
                      <p class="text-sm"><strong>Problem 3 (1 mark):</strong> Direct access to internal transaction log. Fix: Provide controlled access through getter method.</p>
                    </div>
                  </details>
                </div>
              </div>
            </div>

            <!-- NESA Exam Context -->
            <div class="bg-amber-50 p-4 rounded-lg border border-amber-200">
              <div class="flex items-start">
                <svg class="w-5 h-5 text-amber-600 mr-3 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <div>
                  <p class="font-semibold text-amber-900 mb-1">NESA Exam Focus</p>
                  <p class="text-amber-800 text-sm">Encapsulation questions often focus on data protection and access control. Practice identifying private vs public elements, explaining why data should be protected, and designing getter/setter methods. Be prepared to write code that demonstrates proper encapsulation principles.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>