---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import OOPNav from '../../../components/OOPNav';
import Tooltip from '../../../components/Tooltip';
import '../../../styles/global.css';

// Use Astro's base URL for proper GitHub Pages routing
const base = import.meta.env.BASE_URL;
---

<BaseLayout title="Abstraction - Object-Oriented Programming" description="Understanding abstraction, hiding complexity, and simplifying interfaces in object-oriented programming">
  <!-- Breadcrumb Bar -->
  <div class="bg-gray-50 border-b border-gray-200 py-3">
    <div class="container mx-auto px-6">
      <nav>
        <a href={`${base}/`} class="text-sm text-gray-600 hover:text-blue-900 transition-colors">Home</a>
        <span class="text-sm text-gray-400 mx-2">></span>
        <a href={`${base}/topics/object-oriented-programming`} class="text-sm text-gray-600 hover:text-blue-900 transition-colors">Object-Oriented Programming</a>
        <span class="text-sm text-gray-400 mx-2">></span>
        <span class="text-sm text-blue-900 font-medium">Abstraction</span>
      </nav>
    </div>
  </div>

  <div class="min-h-screen bg-gray-50 py-8">
    <div class="container mx-auto px-6">
      <div class="grid lg:grid-cols-4 gap-8">
        <!-- Navigation Sidebar -->
        <div class="lg:col-span-1">
          <div class="sticky top-8 bg-white rounded-lg shadow-sm p-6 max-h-[calc(100vh-6rem)] overflow-y-auto">
            <OOPNav 
              client:load 
              currentPage="/topics/object-oriented-programming/abstraction"
            />
          </div>
        </div>

        <!-- Main Content -->
        <div class="lg:col-span-3">
          <div class="bg-white rounded-lg shadow-sm p-8">
            <h1 class="text-4xl font-bold mb-6">Abstraction</h1>
            
            <div class="mb-8 p-6 bg-gradient-to-r from-purple-50 to-blue-50 rounded-xl border border-purple-200">
              <h2 class="text-2xl font-bold text-gray-900 mb-4">What is Abstraction?</h2>
              <p class="text-gray-800 text-lg leading-relaxed">
                <strong>Abstraction</strong> means hiding complex implementation details and showing only essential features. Like using a remote control - you don't need to understand the electronics inside, just which buttons to press.
              </p>
            </div>

            <!-- Core Concepts -->
            <div class="mb-8">
              <h2 class="text-2xl font-semibold mb-6 text-gray-900">Core Abstraction Concepts</h2>
              
              <!-- Hiding Complexity -->
              <div class="mb-6 bg-purple-50 p-6 rounded-lg border border-purple-200">
                <h3 class="text-xl font-semibold text-purple-800 mb-4">1. Hiding Complexity</h3>
                <p class="text-purple-700 mb-4">Hide the complex workings and expose only what users need to know.</p>
                
                <div class="bg-white p-4 rounded border border-purple-300">
                  <h4 class="font-medium text-purple-700 mb-2">Python Example:</h4>
                  <pre class="text-sm font-mono bg-gray-100 text-gray-800 p-3 rounded border-l-4 border-purple-400"><code>class Calculator:
    def __init__(self):
        self._history = []  # Hidden complexity
        self._precision = 10  # Hidden setting
    
    def add(self, a, b):
        """Simple interface - complexity hidden"""
        result = self._perform_calculation('add', a, b)
        return result
    
    def _perform_calculation(self, operation, a, b):
        """Complex internal method - hidden from user"""
        # Complex validation, logging, precision handling
        if operation == 'add':
            result = round(a + b, self._precision)
        self._history.append(operation + ": " + str(a) + " + " + str(b) + " = " + str(result))
        return result

# User sees simple interface
calc = Calculator()
result = calc.add(5, 3)  # Simple to use
print("Result: " + str(result))</code></pre>
                </div>
              </div>
            </div>

            <!-- Practice Questions -->
            <div class="mb-8">
              <h2 class="text-2xl font-semibold mb-6 text-gray-900">Practice Questions</h2>
              
              <div class="space-y-6">
                <!-- Question 1 -->
                <div class="bg-white p-6 rounded-lg border-l-4 border-purple-500 shadow-sm">
                  <h3 class="font-semibold text-gray-900 mb-3">Question 1 (4 marks)</h3>
                  <p class="text-gray-700 mb-4"><strong>Explain</strong> how abstraction is demonstrated in this TV remote control example and <strong>identify</strong> what is hidden from the user:</p>
                  
                  <div class="bg-gray-50 p-4 rounded-lg mb-4">
                    <pre class="text-sm font-mono"><code>class TVRemote:
    def power_on(self):
        print("TV turning on...")
    
    def change_channel(self, channel):
        print("Switching to channel " + str(channel))
    
    def adjust_volume(self, level):
        print("Volume set to " + str(level))</code></pre>
                  </div>
                  
                  <details class="mt-4">
                    <summary class="cursor-pointer text-purple-600 hover:text-purple-800 font-medium">Show Answer</summary>
                    <div class="mt-3 p-4 bg-gray-50 rounded">
                      <p class="text-sm mb-2"><strong>Abstraction shown (2 marks):</strong> The remote provides simple methods (power_on, change_channel, adjust_volume) that hide the complex electronics and signal processing.</p>
                      <p class="text-sm"><strong>Hidden details (2 marks):</strong> Infrared signal generation, frequency modulation, TV's internal circuitry, and hardware communication protocols.</p>
                    </div>
                  </details>
                </div>
              </div>
            </div>

            <!-- NESA Exam Context -->
            <div class="bg-amber-50 p-4 rounded-lg border border-amber-200">
              <div class="flex items-start">
                <svg class="w-5 h-5 text-amber-600 mr-3 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <div>
                  <p class="font-semibold text-amber-900 mb-1">NESA Exam Focus</p>
                  <p class="text-amber-800 text-sm">Abstraction questions often ask you to identify what complexity is hidden and how simple interfaces are provided. Focus on understanding the difference between what users see (simple methods) and what happens internally (complex implementation).</p>
                </div>
              </div>
            </div>
            
          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>