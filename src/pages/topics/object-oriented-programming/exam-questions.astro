---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import OOPNav from '../../../components/OOPNav';
import '../../../styles/global.css';
---

<BaseLayout title="OOP Exam Questions - Object-Oriented Programming" description="NESA-style exam questions covering OOP concepts with proper command words, marking criteria, and sample answers to maximize your exam performance">
  <!-- Breadcrumb Bar -->
  <div class="bg-gray-50 border-b border-gray-200 py-3">
    <div class="container mx-auto px-6">
      <nav>
        <a href="/" class="text-sm text-gray-600 hover:text-gray-900 transition-colors">Home</a>
        <span class="text-sm text-gray-400 mx-2">></span>
        <a href="/topics/object-oriented-programming" class="text-sm text-gray-600 hover:text-gray-900 transition-colors">Object-Oriented Programming</a>
        <span class="text-sm text-gray-400 mx-2">></span>
        <span class="text-sm text-gray-900 font-medium">Exam Questions</span>
      </nav>
    </div>
  </div>

  <div class="min-h-screen bg-gray-50 py-8">
    <div class="container mx-auto px-6">
      <div class="grid lg:grid-cols-4 gap-8">
        <!-- Navigation Sidebar -->
        <div class="lg:col-span-1">
          <div class="sticky top-8 bg-white rounded-lg shadow-sm p-6 max-h-[calc(100vh-6rem)] overflow-y-auto">
            <OOPNav 
              client:load 
              currentPage="/topics/object-oriented-programming/exam-questions"
            />
          </div>
        </div>

        <!-- Main Content -->
        <div class="lg:col-span-3">
          <div class="bg-white rounded-lg shadow-sm p-8">
            <h1 class="text-4xl font-bold mb-6">Object-Oriented Programming</h1>
            <h2 class="text-2xl font-semibold text-blue-600 mb-8">Practice Exam Questions</h2>

    <!-- NESA Keywords -->
    <div class="mb-8 p-6 bg-gradient-to-r from-amber-50 to-orange-50 rounded-lg border border-amber-200">
      <h3 class="text-xl font-bold text-amber-800 mb-4">ðŸ“š NESA Command Words</h3>
      <p class="text-amber-700 text-sm mb-4">The Software Engineering exam uses specific keywords that tell you what kind of response is expected:</p>
      
      <div class="grid md:grid-cols-2 gap-4 text-sm">
        <div>
          <p><strong class="text-amber-800">Identify:</strong> Name it (1-2 words)</p>
          <p><strong class="text-amber-800">Outline:</strong> Key features in a sentence or two</p>
          <p><strong class="text-amber-800">Describe:</strong> What it is + some detail about features/purpose</p>
        </div>
        <div>
          <p><strong class="text-amber-800">Explain:</strong> Show HOW or WHY (cause â†’ effect)</p>
          <p><strong class="text-amber-800">Distinguish:</strong> Point out the difference clearly</p>
          <p><strong class="text-amber-800">Justify:</strong> Give reasons and evidence</p>
        </div>
      </div>
    </div>

    <!-- Question 1 -->
    <div class="mb-8 p-6 bg-white border-2 border-gray-200 rounded-lg">
      <div class="border-b border-gray-200 pb-4 mb-6">
        <h3 class="text-lg font-bold text-gray-800">Question 1 (2 marks)</h3>
        <p class="text-gray-700 mt-2 font-medium">
          Identify two characteristics of object-oriented programming.
        </p>
      </div>
      
      <div class="mb-4">
        <div class="border-l-4 border-gray-300 pl-4">
          <div class="space-y-2">
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
          </div>
        </div>
      </div>

      <details class="mt-6">
        <summary class="cursor-pointer bg-green-50 p-3 rounded text-green-800 font-medium hover:bg-green-100">
          ðŸ“‹ View Marking Criteria & Sample Answer
        </summary>
        <div class="mt-4 p-4 bg-gray-50 rounded">
          <div class="mb-4">
            <h4 class="font-bold text-green-700 mb-2">Marking Criteria:</h4>
            <ul class="text-sm space-y-1">
              <li><strong>2 marks:</strong> Correctly identifies two distinct characteristics of object-oriented programming</li>
              <li><strong>1 mark:</strong> Identifies one characteristic correctly OR shows basic understanding of OOP concepts</li>
            </ul>
          </div>
          <div>
            <h4 class="font-bold text-green-700 mb-2">Sample Answer:</h4>
            <div class="text-sm bg-white p-3 rounded border">
              <p>â€¢ Encapsulation</p>
              <p>â€¢ Inheritance</p>
              <p class="text-gray-600 mt-2 italic">Other acceptable answers: Polymorphism, Abstraction, Data hiding, Code reusability</p>
            </div>
          </div>
        </div>
      </details>
    </div>

    <!-- Question 2 -->
    <div class="mb-8 p-6 bg-white border-2 border-gray-200 rounded-lg">
      <div class="border-b border-gray-200 pb-4 mb-6">
        <h3 class="text-lg font-bold text-gray-800">Question 2 (3 marks)</h3>
        <p class="text-gray-700 mt-2 font-medium">
          Describe what encapsulation means in object-oriented programming.
        </p>
      </div>
      
      <div class="mb-4">
        <div class="border-l-4 border-gray-300 pl-4">
          <div class="space-y-2">
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
          </div>
        </div>
      </div>

      <details class="mt-6">
        <summary class="cursor-pointer bg-green-50 p-3 rounded text-green-800 font-medium hover:bg-green-100">
          ðŸ“‹ View Marking Criteria & Sample Answer
        </summary>
        <div class="mt-4 p-4 bg-gray-50 rounded">
          <div class="mb-4">
            <h4 class="font-bold text-green-700 mb-2">Marking Criteria:</h4>
            <ul class="text-sm space-y-1">
              <li><strong>3 marks:</strong> Describes encapsulation with data bundling, method association, AND data hiding/protection concepts</li>
              <li><strong>2 marks:</strong> Describes two key aspects of encapsulation (data bundling OR data hiding) with good understanding</li>
              <li><strong>1 mark:</strong> Shows basic understanding of encapsulation but description incomplete or unclear</li>
            </ul>
          </div>
          <div>
            <h4 class="font-bold text-green-700 mb-2">Sample Answer:</h4>
            <div class="text-sm bg-white p-3 rounded border">
              <p>Encapsulation is the bundling of data (attributes) and methods that operate on that data within a single unit (class). It also involves hiding the internal implementation details from external code by making attributes private, so they can only be accessed through specific methods. This protects the integrity of the object's data and provides a controlled interface for interacting with the object.</p>
            </div>
          </div>
        </div>
      </details>
    </div>

    <!-- Question 3 -->
    <div class="mb-8 p-6 bg-white border-2 border-gray-200 rounded-lg">
      <div class="border-b border-gray-200 pb-4 mb-6">
        <h3 class="text-lg font-bold text-gray-800">Question 3 (4 marks)</h3>
        <p class="text-gray-700 mt-2 font-medium">
          Explain why inheritance is useful in object-oriented programming.
        </p>
      </div>
      
      <div class="mb-4">
        <div class="border-l-4 border-gray-300 pl-4">
          <div class="space-y-2">
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
          </div>
        </div>
      </div>

      <details class="mt-6">
        <summary class="cursor-pointer bg-green-50 p-3 rounded text-green-800 font-medium hover:bg-green-100">
          ðŸ“‹ View Marking Criteria & Sample Answer
        </summary>
        <div class="mt-4 p-4 bg-gray-50 rounded">
          <div class="mb-4">
            <h4 class="font-bold text-green-700 mb-2">Marking Criteria:</h4>
            <ul class="text-sm space-y-1">
              <li><strong>4 marks:</strong> Explains why inheritance is useful with clear cause-and-effect relationships (e.g., code reuse â†’ less duplication; shared updates â†’ easier maintenance)</li>
              <li><strong>3 marks:</strong> Explains inheritance benefits but lacks clear cause-and-effect structure</li>
              <li><strong>2 marks:</strong> Shows understanding of inheritance advantages but explanation incomplete or unclear</li>
              <li><strong>1 mark:</strong> Shows basic understanding of inheritance concept but fails to explain usefulness effectively</li>
            </ul>
          </div>
          <div>
            <h4 class="font-bold text-green-700 mb-2">Sample Answer:</h4>
            <div class="text-sm bg-white p-3 rounded border">
              <p><strong>Cause-and-effect structure:</strong></p>
              <p>Inheritance allows child classes to inherit attributes and methods from parent classes (cause), so developers don't need to rewrite common functionality, reducing code duplication and development time (effect). When changes are needed to shared functionality, they only need to be made in the parent class (cause), and all child classes automatically inherit the updates, making maintenance more efficient (effect). This hierarchical structure also models real-world relationships naturally, making code more intuitive to understand and extend.</p>
            </div>
          </div>
        </div>
      </details>
    </div>

    <!-- Question 4 -->
    <div class="mb-8 p-6 bg-white border-2 border-gray-200 rounded-lg">
      <div class="border-b border-gray-200 pb-4 mb-6">
        <h3 class="text-lg font-bold text-gray-800">Question 4 (3 marks)</h3>
        <p class="text-gray-700 mt-2 font-medium">
          Distinguish between inheritance and polymorphism in object-oriented programming.
        </p>
      </div>
      
      <div class="mb-4">
        <div class="border-l-4 border-gray-300 pl-4">
          <div class="space-y-2">
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
          </div>
        </div>
      </div>

      <details class="mt-6">
        <summary class="cursor-pointer bg-green-50 p-3 rounded text-green-800 font-medium hover:bg-green-100">
          ðŸ“‹ View Marking Criteria & Sample Answer
        </summary>
        <div class="mt-4 p-4 bg-gray-50 rounded">
          <div class="mb-4">
            <h4 class="font-bold text-green-700 mb-2">Marking Criteria:</h4>
            <ul class="text-sm space-y-1">
              <li><strong>3 marks:</strong> Clearly distinguishes between inheritance and polymorphism with specific differences (code reuse vs behavior variation) and accurate examples</li>
              <li><strong>2 marks:</strong> Distinguishes between concepts but explanation may lack clarity or specificity</li>
              <li><strong>1 mark:</strong> Shows basic understanding of one concept but fails to distinguish effectively</li>
            </ul>
          </div>
          <div>
            <h4 class="font-bold text-green-700 mb-2">Sample Answer:</h4>
            <div class="text-sm bg-white p-3 rounded border">
              <p>Inheritance is about creating new classes that inherit attributes and methods from existing parent classes, establishing a hierarchical relationship between classes. Polymorphism, however, is about the ability for different objects to respond to the same method call in their own specific way, even though they share the same method name. While inheritance focuses on code reuse and class relationships, polymorphism focuses on flexible method behavior across different object types.</p>
            </div>
          </div>
        </div>
      </details>
    </div>

    <!-- Question 5 -->
    <div class="mb-8 p-6 bg-white border-2 border-gray-200 rounded-lg">
      <div class="border-b border-gray-200 pb-4 mb-6">
        <h3 class="text-lg font-bold text-gray-800">Question 5 (5 marks)</h3>
        <p class="text-gray-700 mt-2 font-medium">
          A school wants to create classes for different types of users in their system. They have created a base class called <code>User</code> with attributes name and email. They now want to create <code>Student</code> and <code>Teacher</code> classes that inherit from <code>User</code>.
        </p>
        <p class="text-gray-700 mt-2 font-medium">
          Justify why using inheritance would be better than creating separate, unrelated Student and Teacher classes.
        </p>
      </div>
      
      <div class="mb-4">
        <div class="border-l-4 border-gray-300 pl-4">
          <div class="space-y-2">
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
          </div>
        </div>
      </div>

      <details class="mt-6">
        <summary class="cursor-pointer bg-green-50 p-3 rounded text-green-800 font-medium hover:bg-green-100">
          ðŸ“‹ View Marking Criteria & Sample Answer
        </summary>
        <div class="mt-4 p-4 bg-gray-50 rounded">
          <div class="mb-4">
            <h4 class="font-bold text-green-700 mb-2">Marking Criteria:</h4>
            <ul class="text-sm space-y-1">
              <li><strong>5 marks:</strong> Justifies inheritance with multiple specific reasons (code elimination, maintenance efficiency, polymorphism support, logical modeling) related to the User/Student/Teacher scenario</li>
              <li><strong>4 marks:</strong> Provides strong justification with 2-3 specific reasons but may miss some scenario details</li>
              <li><strong>3 marks:</strong> Shows understanding of inheritance benefits with basic justification but lacks scenario-specific analysis</li>
              <li><strong>2 marks:</strong> Shows basic understanding of inheritance advantages but justification is weak or generic</li>
              <li><strong>1 mark:</strong> Shows minimal understanding of inheritance concept but fails to provide adequate justification</li>
            </ul>
          </div>
          <div>
            <h4 class="font-bold text-green-700 mb-2">Sample Answer:</h4>
            <div class="text-sm bg-white p-3 rounded border">
              <p>Using inheritance eliminates code duplication because both Student and Teacher classes automatically inherit the name and email attributes from User, rather than having to define these common properties separately in each class. This reduces the chance of errors and inconsistencies. When updates are needed to user-related functionality (like email validation), changes only need to be made once in the User class and all subclasses benefit automatically. The inheritance hierarchy also reflects the real-world relationship where students and teachers are both types of users, making the code structure logical and easier to understand. Finally, it enables polymorphism where Student and Teacher objects can be treated uniformly as User objects when only basic user information is needed, providing flexibility in how the system processes different user types.</p>
            </div>
          </div>
        </div>
      </details>
    </div>

    <!-- Question 6 -->
    <div class="mb-8 p-6 bg-white border-2 border-gray-200 rounded-lg">
      <div class="border-b border-gray-200 pb-4 mb-6">
        <h3 class="text-lg font-bold text-gray-800">Question 6 (4 marks)</h3>
        <p class="text-gray-700 mt-2 font-medium">
          Explain how abstraction helps manage complexity in object-oriented programming, using a real-world example to support your answer.
        </p>
      </div>
      
      <div class="mb-4">
        <div class="border-l-4 border-gray-300 pl-4">
          <div class="space-y-2">
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
          </div>
        </div>
      </div>

      <details class="mt-6">
        <summary class="cursor-pointer bg-green-50 p-3 rounded text-green-800 font-medium hover:bg-green-100">
          ðŸ“‹ View Marking Criteria & Sample Answer
        </summary>
        <div class="mt-4 p-4 bg-gray-50 rounded">
          <div class="mb-4">
            <h4 class="font-bold text-green-700 mb-2">Marking Criteria:</h4>
            <ul class="text-sm space-y-1">
              <li><strong>4 marks:</strong> Explains how abstraction manages complexity with cause-and-effect relationships AND provides relevant real-world example demonstrating the concept</li>
              <li><strong>3 marks:</strong> Explains abstraction's role in complexity management but may lack clear example or cause-and-effect structure</li>
              <li><strong>2 marks:</strong> Shows understanding of abstraction concept but explanation incomplete or example inappropriate</li>
              <li><strong>1 mark:</strong> Shows basic understanding of abstraction but fails to connect to complexity management effectively</li>
            </ul>
          </div>
          <div>
            <h4 class="font-bold text-green-700 mb-2">Sample Answer:</h4>
            <div class="text-sm bg-white p-3 rounded border">
              <p>Abstraction hides complex implementation details behind simple interfaces (cause), which reduces cognitive load on developers and makes systems easier to use and understand (effect). For example, when using a car, drivers only need to know how to use the steering wheel, pedals, and gear shift (simple interface), without understanding the complex engineering of the engine, transmission, and braking systems (hidden complexity). Similarly, in programming, a Database class might provide simple methods like save() and find() (cause), allowing developers to store and retrieve data without needing to understand SQL queries, connection management, or database optimization (effect). This separation allows developers to focus on solving business problems rather than managing technical complexity.</p>
            </div>
          </div>
        </div>
      </details>
    </div>

    <!-- Question 7 -->
    <div class="mb-8 p-6 bg-white border-2 border-gray-200 rounded-lg">
      <div class="border-b border-gray-200 pb-4 mb-6">
        <h3 class="text-lg font-bold text-gray-800">Question 7 (5 marks)</h3>
        <p class="text-gray-700 mt-2 font-medium">
          A game development company is creating different types of vehicles for their racing game. They have a base Vehicle class with attributes speed and fuel, and methods startEngine() and stopEngine().
        </p>
        <p class="text-gray-700 mt-2 font-medium">
          Describe how you would use polymorphism to allow different vehicle types (Car, Motorcycle, Truck) to have different acceleration behaviors, and explain the benefits this approach provides.
        </p>
      </div>
      
      <div class="mb-4">
        <div class="border-l-4 border-gray-300 pl-4">
          <div class="space-y-2">
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
          </div>
        </div>
      </div>

      <details class="mt-6">
        <summary class="cursor-pointer bg-green-50 p-3 rounded text-green-800 font-medium hover:bg-green-100">
          ðŸ“‹ View Marking Criteria & Sample Answer
        </summary>
        <div class="mt-4 p-4 bg-gray-50 rounded">
          <div class="mb-4">
            <h4 class="font-bold text-green-700 mb-2">Marking Criteria:</h4>
            <ul class="text-sm space-y-1">
              <li><strong>5 marks:</strong> Describes polymorphism implementation (method overriding) AND explains multiple benefits (uniform interface, extensibility, maintainability) with vehicle-specific context</li>
              <li><strong>4 marks:</strong> Good description of polymorphism with most benefits explained but may lack some implementation details</li>
              <li><strong>3 marks:</strong> Shows understanding of polymorphism concept and some benefits but explanation lacks depth</li>
              <li><strong>2 marks:</strong> Basic understanding of polymorphism but fails to connect to practical benefits effectively</li>
              <li><strong>1 mark:</strong> Shows minimal understanding of polymorphism concept but lacks implementation or benefit explanation</li>
            </ul>
          </div>
          <div>
            <h4 class="font-bold text-green-700 mb-2">Sample Answer:</h4>
            <div class="text-sm bg-white p-3 rounded border">
              <p><strong>Implementation:</strong> Create an accelerate() method in the base Vehicle class, then override this method in each subclass (Car, Motorcycle, Truck) to provide vehicle-specific behavior. The Car class might implement quick acceleration, the Motorcycle class very rapid acceleration, and the Truck class slower acceleration due to weight.</p>
              
              <p class="mt-3"><strong>Benefits:</strong></p>
              <p>â€¢ <strong>Uniform Interface:</strong> Game code can call accelerate() on any vehicle object without knowing its specific type, simplifying game logic</p>
              <p>â€¢ <strong>Easy Extension:</strong> New vehicle types can be added by creating new subclasses with their own accelerate() implementation</p>
              <p>â€¢ <strong>Realistic Behavior:</strong> Each vehicle behaves according to its real-world characteristics while sharing common vehicle functionality</p>
              <p>â€¢ <strong>Maintainable Code:</strong> Changes to specific vehicle behavior only require modifications to the relevant subclass</p>
            </div>
          </div>
        </div>
      </details>
    </div>

    <!-- Question 8 -->
    <div class="mb-8 p-6 bg-white border-2 border-gray-200 rounded-lg">
      <div class="border-b border-gray-200 pb-4 mb-6">
        <h3 class="text-lg font-bold text-gray-800">Question 8 (6 marks)</h3>
        <p class="text-gray-700 mt-2 font-medium">
          A social media application needs to manage different types of posts: TextPost, ImagePost, and VideoPost. All posts share common attributes like author, timestamp, and content, but each type requires different validation and display methods.
        </p>
        <p class="text-gray-700 mt-2 font-medium">
          Design a class hierarchy using OOP principles that demonstrates inheritance, encapsulation, and polymorphism. Include specific examples of methods and explain how each OOP principle is applied.
        </p>
      </div>
      
      <div class="mb-4">
        <div class="border-l-4 border-gray-300 pl-4">
          <div class="space-y-2">
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
            <div class="border-b border-gray-300 h-6"></div>
          </div>
        </div>
      </div>

      <details class="mt-6">
        <summary class="cursor-pointer bg-green-50 p-3 rounded text-green-800 font-medium hover:bg-green-100">
          ðŸ“‹ View Marking Criteria & Sample Answer
        </summary>
        <div class="mt-4 p-4 bg-gray-50 rounded">
          <div class="mb-4">
            <h4 class="font-bold text-green-700 mb-2">Marking Criteria:</h4>
            <ul class="text-sm space-y-1">
              <li><strong>6 marks:</strong> Complete class hierarchy design with proper inheritance structure, encapsulation (private attributes), and polymorphism (method overriding) clearly demonstrated</li>
              <li><strong>5 marks:</strong> Good class design showing 2-3 OOP principles correctly with minor issues in implementation details</li>
              <li><strong>4 marks:</strong> Shows understanding of class hierarchy and inheritance but may be missing clear encapsulation or polymorphism examples</li>
              <li><strong>2-3 marks:</strong> Basic class structure attempted but significant errors in OOP principle application</li>
              <li><strong>1 mark:</strong> Shows minimal understanding of class design but lacks proper OOP implementation</li>
            </ul>
          </div>
          <div>
            <h4 class="font-bold text-green-700 mb-2">Sample Answer:</h4>
            <div class="text-sm bg-white p-3 rounded border">
              <p><strong>Class Hierarchy Design:</strong></p>
              <div class="bg-gray-100 p-3 rounded mt-2 font-mono text-xs">
                <p>class Post:</p>
                <p>&nbsp;&nbsp;private author, timestamp, content</p>
                <p>&nbsp;&nbsp;public getAuthor(), setContent(), display(), validate()</p>
                <br>
                <p>class TextPost extends Post:</p>
                <p>&nbsp;&nbsp;public validate() // check character limit</p>
                <p>&nbsp;&nbsp;public display() // show text with formatting</p>
                <br>
                <p>class ImagePost extends Post:</p>
                <p>&nbsp;&nbsp;private imageUrl, altText</p>
                <p>&nbsp;&nbsp;public validate() // check image format/size</p>
                <p>&nbsp;&nbsp;public display() // show image with caption</p>
                <br>
                <p>class VideoPost extends Post:</p>
                <p>&nbsp;&nbsp;private videoUrl, duration</p>
                <p>&nbsp;&nbsp;public validate() // check video format/length</p>
                <p>&nbsp;&nbsp;public display() // show video player</p>
              </div>
              
              <p class="mt-3"><strong>OOP Principles Applied:</strong></p>
              <p>â€¢ <strong>Inheritance:</strong> TextPost, ImagePost, and VideoPost inherit common attributes (author, timestamp, content) and methods from the base Post class</p>
              <p>â€¢ <strong>Encapsulation:</strong> Attributes are private and accessed through public getter/setter methods, protecting data integrity</p>
              <p>â€¢ <strong>Polymorphism:</strong> Each subclass overrides validate() and display() methods to provide type-specific behavior while maintaining the same interface</p>
            </div>
          </div>
        </div>
      </details>
    </div>

    <!-- Question 9 -->
    <div class="mb-8 p-6 bg-white border-2 border-gray-200 rounded-lg">
      <div class="border-b border-gray-200 pb-4 mb-6">
        <h3 class="text-lg font-bold text-gray-800">Question 9 (4 marks)</h3>
        <p class="text-gray-700 mt-2 font-medium">
          Compare the benefits of using object-oriented programming versus procedural programming for developing a large-scale banking application with multiple user types and complex business rules.
        </p>
      </div>
      
      <div class="mb-4">
        <div class="border-l-4 border-gray-300 pl-4">
          <div class="space-y-3">
            <div>
              <p class="text-sm font-medium text-gray-600 mb-1">OOP Benefits:</p>
              <div class="space-y-2">
                <div class="border-b border-gray-300 h-6"></div>
                <div class="border-b border-gray-300 h-6"></div>
                <div class="border-b border-gray-300 h-6"></div>
              </div>
            </div>
            <div>
              <p class="text-sm font-medium text-gray-600 mb-1">Procedural Programming Limitations:</p>
              <div class="space-y-2">
                <div class="border-b border-gray-300 h-6"></div>
                <div class="border-b border-gray-300 h-6"></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <details class="mt-6">
        <summary class="cursor-pointer bg-green-50 p-3 rounded text-green-800 font-medium hover:bg-green-100">
          ðŸ“‹ View Marking Criteria & Sample Answer
        </summary>
        <div class="mt-4 p-4 bg-gray-50 rounded">
          <div class="mb-4">
            <h4 class="font-bold text-green-700 mb-2">Marking Criteria:</h4>
            <ul class="text-sm space-y-1">
              <li><strong>4 marks:</strong> Compares OOP and procedural programming with specific benefits for large-scale banking applications (modularity, maintainability, security, scalability)</li>
              <li><strong>3 marks:</strong> Good comparison showing understanding of both paradigms but may lack specific connection to banking context</li>
              <li><strong>2 marks:</strong> Shows understanding of programming paradigm differences but comparison lacks depth or banking relevance</li>
              <li><strong>1 mark:</strong> Shows basic understanding of one paradigm but fails to provide meaningful comparison</li>
            </ul>
          </div>
          <div>
            <h4 class="font-bold text-green-700 mb-2">Sample Answer:</h4>
            <div class="text-sm bg-white p-3 rounded border">
              <p><strong>OOP Benefits for Banking Application:</strong></p>
              <p>â€¢ <strong>Modularity:</strong> Different account types (Savings, Checking, Credit) can be separate classes, making code easier to organize and maintain</p>
              <p>â€¢ <strong>Code Reusability:</strong> Common banking operations (deposit, withdraw, calculate interest) can be inherited by all account types, reducing duplication</p>
              <p>â€¢ <strong>Encapsulation:</strong> Sensitive data like account balances and customer information can be protected with private attributes and controlled access methods</p>
              <p>â€¢ <strong>Extensibility:</strong> New account types or user roles can be added easily without modifying existing code</p>
              
              <p class="mt-3"><strong>Procedural Programming Limitations:</strong></p>
              <p>â€¢ <strong>Code Duplication:</strong> Similar functions would need to be written for each account type, leading to maintenance challenges</p>
              <p>â€¢ <strong>Global Data Exposure:</strong> Account data and business logic would be more difficult to protect and control access to</p>
            </div>
          </div>
        </div>
      </details>
    </div>

    <!-- Question 10 -->
    <div class="mb-8 p-6 bg-white border-2 border-gray-200 rounded-lg">
      <div class="border-b border-gray-200 pb-4 mb-6">
        <h3 class="text-lg font-bold text-gray-800">Question 10 (3 marks)</h3>
        <p class="text-gray-700 mt-2 font-medium">
          Identify three specific benefits of using encapsulation in object-oriented programming and provide a brief example for each.
        </p>
      </div>
      
      <div class="mb-4">
        <div class="border-l-4 border-gray-300 pl-4">
          <div class="space-y-3">
            <div>
              <p class="text-sm font-medium text-gray-600 mb-1">Benefit 1:</p>
              <div class="space-y-2">
                <div class="border-b border-gray-300 h-6"></div>
                <div class="border-b border-gray-300 h-6"></div>
              </div>
            </div>
            <div>
              <p class="text-sm font-medium text-gray-600 mb-1">Benefit 2:</p>
              <div class="space-y-2">
                <div class="border-b border-gray-300 h-6"></div>
                <div class="border-b border-gray-300 h-6"></div>
              </div>
            </div>
            <div>
              <p class="text-sm font-medium text-gray-600 mb-1">Benefit 3:</p>
              <div class="space-y-2">
                <div class="border-b border-gray-300 h-6"></div>
                <div class="border-b border-gray-300 h-6"></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <details class="mt-6">
        <summary class="cursor-pointer bg-green-50 p-3 rounded text-green-800 font-medium hover:bg-green-100">
          ðŸ“‹ View Marking Criteria & Sample Answer
        </summary>
        <div class="mt-4 p-4 bg-gray-50 rounded">
          <div class="mb-4">
            <h4 class="font-bold text-green-700 mb-2">Marking Criteria:</h4>
            <ul class="text-sm space-y-1">
              <li><strong>3 marks:</strong> Correctly identifies three specific benefits of encapsulation with appropriate examples for each (data protection, implementation hiding, maintainability)</li>
              <li><strong>2 marks:</strong> Identifies two benefits correctly with good examples OR three benefits with weak examples</li>
              <li><strong>1 mark:</strong> Identifies one benefit correctly with appropriate example OR shows basic understanding of encapsulation</li>
            </ul>
          </div>
          <div>
            <h4 class="font-bold text-green-700 mb-2">Sample Answer:</h4>
            <div class="text-sm bg-white p-3 rounded border">
              <p><strong>Benefit 1: Data Protection</strong></p>
              <p>Private attributes prevent external code from directly modifying critical data. Example: A BankAccount class with private balance attribute ensures deposits/withdrawals only happen through controlled methods.</p>
              
              <p class="mt-3"><strong>Benefit 2: Implementation Hiding</strong></p>
              <p>Internal complexity is hidden behind simple public interfaces. Example: A password validation method hides complex encryption logic behind a simple checkPassword() method.</p>
              
              <p class="mt-3"><strong>Benefit 3: Maintainability</strong></p>
              <p>Internal implementation can change without affecting external code. Example: Changing how data is stored internally doesn't require updating code that uses the class's public methods.</p>
            </div>
          </div>
        </div>
      </details>
    </div>

            <!-- Study Tips -->
            <div class="bg-blue-50 p-6 rounded-lg border border-blue-200">
              <h3 class="text-xl font-bold text-blue-800 mb-4">ðŸ’¡ OOP Exam Success Tips</h3>
              <div class="grid md:grid-cols-2 gap-4 text-sm text-blue-700">
                <div>
                  <h4 class="font-semibold mb-2">For "Explain" Questions:</h4>
                  <ul class="space-y-1">
                    <li>â€¢ Show specific OOP benefits and their effects</li>
                    <li>â€¢ Link concepts to real-world programming scenarios</li>
                    <li>â€¢ Use concrete examples (like the User/Student/Teacher hierarchy)</li>
                  </ul>
                </div>
                <div>
                  <h4 class="font-semibold mb-2">For "Distinguish" Questions:</h4>
                  <ul class="space-y-1">
                    <li>â€¢ Focus on the key functional differences</li>
                    <li>â€¢ Don't just define both - show how they differ in purpose</li>
                    <li>â€¢ Use specific examples to illustrate the differences</li>
                  </ul>
                </div>
              </div>
              <div class="mt-4 p-3 bg-blue-100 rounded">
                <p class="font-semibold text-blue-800">Remember the OOP "Big Four":</p>
                <p class="text-blue-700 text-xs">Encapsulation (data hiding) â€¢ Inheritance (code reuse) â€¢ Polymorphism (flexible behavior) â€¢ Abstraction (simplify complexity)</p>
              </div>
            </div>

          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>